name: Release

on:
  release:
    types: [published]

jobs:
  buildlinux:
    name: "Release"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Restore Nuget Packages
      run: dotnet restore CallbackHandler.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build CallbackHandler.sln --configuration Release

    - name: Run Unit Tests
      run: |
        echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
        dotnet test "CallbackHandler.BusinessLogic.Tests\CallbackHandler.BusinessLogic.Tests.csproj"
        dotnet test "CallbackHandler.CallbackMessageAggregate.Tests\CallbackHandler.CallbackMessageAggregate.Tests.csproj"
        dotnet test "CallbackHandler.Tests\CallbackHandler.Tests.csproj"

    - name: Publish Images to Docker Hub - Pre Release
      if: ${{ github.event.release.prerelease == true }} 
      run: |
        docker build . --file CallbackHandler/Dockerfile --tag stuartferguson/callbackhandler:dev
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/callbackhandler:dev

    - name: Publish Images to Docker Hub - Formal Release
      if: ${{ github.event.release.prerelease == false }} 
      run: |
        docker build . --file CallbackHandler/Dockerfile --tag stuartferguson/callbackhandler:latest
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/callbackhandler:latest

    - name: Publish API
      if: ${{ github.event.release.prerelease == false }} 
      run: dotnet publish "CallbackHandler\CallbackHandler.csproj" --configuration Release --output publishOutput -r win-x64 --self-contained

    - name: Create Zip package 🐙
      id: package
      uses: OctopusDeploy/create-zip-package-action@v3
      with:
        package_id: CallbackHandler
        version: ${{ steps.get_version.outputs.VERSION }}
        base_path: /home/runner/work/CallbackHandler/CallbackHandler/publishOutput
        files: "**/*"
        output_folder: /home/runner/work/CallbackHandler/CallbackHandler

    - name: Push a package to Octopus Deploy 🐙
      uses: OctopusDeploy/push-package-action@v3
      with:
        api_key: ${{ secrets.OCTOPUS_APIKEY }}
        server: ${{ secrets.OCTOPUS_URL }}
        space: ${{ secrets.OCTOPUS_SPACE }}
        packages: ${{ steps.package.outputs.package_file_path }}
    
    - name: Get Release
      if: ${{ github.event.release.prerelease == false }} 
      id: getrelease
      uses: octokit/request-action@v2.0.17
      with:
          route: GET /repos/TransactionProcessing/CallbackHandler/releases/tags/${{ steps.get_version.outputs.VERSION }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Release Notes
      if: ${{ github.event.release.prerelease == false }} 
      id: buildreleasenotes
      uses: gr2m/get-json-paths-action@v1.x
      with:
          json: ${{ steps.getrelease.outputs.data }}
          releasenote: "body"
    
    - name: Create a release in Octopus Deploy 🐙
      uses: OctopusDeploy/create-release-action@v3
      id: "create_release"
      with:
        api_key: ${{ secrets.OCTOPUS_APIKEY }}
        server: ${{ secrets.OCTOPUS_URL }}
        space: ${{ secrets.OCTOPUS_SPACE }}
        project: "Callback Handler"
        package_version: ${{ steps.get_version.outputs.VERSION }}
        release_notes: ${{ steps.buildreleasenotes.outputs.releasenote }}
        release_number: ${{ steps.get_version.outputs.VERSION }}
        ignore_existing: true
        channel: "Default"

    - name: Deploy a release in Octopus Deploy 🐙
      uses: OctopusDeploy/deploy-release-action@v3
      id: "deploy_release"
      with:
        api_key: ${{ secrets.OCTOPUS_APIKEY }}
        server: ${{ secrets.OCTOPUS_URL }}
        project: 'Callback Handler'
        release_number: ${{steps.create_releease.outputs.release_number}}
        environments: |
            Staging      
            
    - name: Await task in Octopus Deploy 🐙
      uses: OctopusDeploy/await-task-action@v3
      with:
        api_key: ${{ secrets.OCTOPUS_APIKEY }}
        server: ${{ secrets.OCTOPUS_URL }}
        space: ${{ secrets.OCTOPUS_SPACE }}
        timeout_after: 300
        polling_interval: 30
        server_task_id: ${{ fromJson(steps.deploy_release.outputs.server_tasks)[0].serverTaskId }}

    - name: Build and Publish Nuget Packages
      if: ${{ github.event.release.prerelease == false }} 
      run: |
        dotnet pack "CallbackHandler.DataTransferObjects\CallbackHandler.DataTransferObjects.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets -c Release            
        dotnet nuget push Nugets/CallbackHandler.DataTransferObjects.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.PRIVATEFEED_APIKEY }} --source ${{ secrets.PRIVATEFEED_URL }}
        dotnet pack "CallbackHandler.CallbackMessage.DomainEvents\CallbackHandler.CallbackMessage.DomainEvents.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets -c Release
        dotnet nuget push Nugets/CallbackHandler.CallbackMessage.DomainEvents.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.PRIVATEFEED_APIKEY }} --source ${{ secrets.PRIVATEFEED_URL }}

  buildwindows:
    name: "Windows Release"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Get the version
      id: get_version
      uses: battila7/get-version-action@v2

    - name: Publish Images to Docker Hub - Pre Release
      if: ${{ github.event.release.prerelease == true }} 
      run: |
        docker build . --file CallbackHandler/Dockerfilewindows --tag stuartferguson/callbackhandlerwindows:dev
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/callbackhandlerwindows:dev
    - name: Publish Images to Docker Hub - Formal Release
      if: ${{ github.event.release.prerelease == false }} 
      run: |
        docker build . --file CallbackHandler/Dockerfilewindows --tag stuartferguson/callbackhandlerwindows:latest
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/callbackhandlerwindows:latest
